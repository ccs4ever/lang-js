
lang-js/dist [krr-migrate-to-gopher-js●] » node
> require('./main.js')
{}
> let r = cue.New()
undefined
> r.Compile("foo: 4")
{"foo":4}
'{"foo":4}'
> r.Compile("foo: '23'")
{"foo":"MjM="}
'{"foo":"MjM="}'
> let t = ` package t
...
... Describe: {
...     [_=_]: {
.....           describe?: Describe
.....           subject?:  _
.....           it?: {
.......                         [_=_] : close({
.........                               assert: valid?: {
...........                                     value: _
...........                                     testsResult = value & subject
...........                                     pass: ( *testsResult | _|_ ) != _|_
...........                                     if pass == false {
.............                                           error: null & "The value should NOT have resulted in _|_. Try running with cue eval --ignore and searching for this string"
.............                                   }
...........                             }
.........                               assert: invalid?: {
...........                                     value: _
...........                                     testsResult = value & subject
...........                                     pass: ( *testsResult | _|_ ) == _|_
...........                                     if pass == false {
.............                                           error: null & "The value SHOULD have resulted in _|_. Try running with cue eval --ignore and searching for this string"
.............                                   }
...........                             }
.........                       })
.......                 }
.....   }
... }
...
... Test: {
...     subject: _
...     describe: {
.....           Describe
.....   }
... }
... `
' package t\n\nDescribe: {\n\t[_=_]: {\n\t\tdescribe?: Describe\n\t\tsubject?:  _\n\t\tit?: {\n\t\t\t[_=_] : close({\n\t\t\t\tassert: valid?: {\n\t\t\t\t\tvalue: _\n\t\t\t\t\ttestsResult = value & subject\n\t\t\t\t\tpass: ( *testsResult | _|_ ) != _|_\n\t\t\t\t\tif pass == false {\n\t\t\t\t\t\terror: null & "The value should NOT have resulted in _|_. Try running with cue eval --ignore and searching for this string"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tassert: invalid?: {\n\t\t\t\t\tvalue: _\n\t\t\t\t\ttestsResult = value & subject\n\t\t\t\t\tpass: ( *testsResult | _|_ ) == _|_\n\t\t\t\t\tif pass == false {\n\t\t\t\t\t\terror: null & "The value SHOULD have resulted in _|_. Try running with cue eval --ignore and searching for this string"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n}\n\nTest: {\n\tsubject: _\n\tdescribe: {\n\t\tDescribe\n\t}\n}\n'
> r
{ __internal_object__:
   { '$val': [Circular],
     runtime: { '$val': [Circular], ctx: [Object], idx: [Object] } },
  Compile: [Function] }
> r.Compile(t)

{ '$val': [Circular],
  err:
   { '$val': [Circular],
     v: { '$val': [Circular], idx: [Object], path: [Object] },
     err:
      { '$val': [Circular],
        baseValue: [Object],
        index: [Object],
        code: 0,
        exprDepth: 0,
        pos: [Object],
        format: 'cannot convert incomplete value %q to JSON',
        args: [typ],
        err: [Object],
        sub: [typ],
        value: [Object],
        wrapped: [Object] } } }
''
> r.Compile("foo: 'hichad'")
{"foo":"aGljaGFk"}
'{"foo":"aGljaGFk"}'
